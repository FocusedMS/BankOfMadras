package com.bankofmadras.service;

import com.bankofmadras.dto.PDFGenerationDTO;
import com.bankofmadras.model.Account;
import com.bankofmadras.model.AuditLog;
import com.bankofmadras.model.Transaction;
import com.bankofmadras.repository.TransactionRepository;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.layout.properties.UnitValue;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.ByteArrayOutputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
@RequiredArgsConstructor
public class PDFGenerationService {
    private final TransactionRepository transactionRepository;
    private final AuditLogService auditLogService;

    @Transactional
    public byte[] generateTransactionHistoryPDF(Account account, PDFGenerationDTO request) {
        // Get transactions for the date range
        List<Transaction> transactions = transactionRepository.findByAccount_AccountNumberAndTimestampBetween(
            account.getAccountNumber(),
            request.getStartDate().atStartOfDay(),
            request.getEndDate().atTime(23, 59, 59)
        );

        // Create PDF
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        PdfWriter writer = new PdfWriter(baos);
        PdfDocument pdf = new PdfDocument(writer);
        Document document = new Document(pdf);

        // Add header
        Paragraph header = new Paragraph("Bank of Madras - Transaction History")
            .setTextAlignment(TextAlignment.CENTER)
            .setFontSize(20)
            .setBold();
        document.add(header);

        // Add account details
        Paragraph accountDetails = new Paragraph(
            String.format("Account Number: %s\nAccount Holder: %s\nPeriod: %s to %s",
                account.getAccountNumber(),
                account.getAccountHolderName(),
                request.getStartDate().format(DateTimeFormatter.ISO_DATE),
                request.getEndDate().format(DateTimeFormatter.ISO_DATE)
            )
        ).setTextAlignment(TextAlignment.LEFT);
        document.add(accountDetails);

        // Add watermark
        Paragraph watermark = new Paragraph("Generated by BankOfMadras")
            .setTextAlignment(TextAlignment.CENTER)
            .setFontSize(8)
            .setItalic();
        document.add(watermark);

        // Create transaction table
        Table table = new Table(UnitValue.createPercentArray(new float[]{20, 20, 20, 20, 20}))
            .useAllAvailableWidth();

        // Add table headers
        table.addHeaderCell(new Cell().add(new Paragraph("Date")));
        table.addHeaderCell(new Cell().add(new Paragraph("Type")));
        table.addHeaderCell(new Cell().add(new Paragraph("Amount")));
        table.addHeaderCell(new Cell().add(new Paragraph("Description")));
        table.addHeaderCell(new Cell().add(new Paragraph("Status")));

        // Add transaction rows
        for (Transaction transaction : transactions) {
            table.addCell(new Cell().add(new Paragraph(
                transaction.getTimestamp().format(DateTimeFormatter.ISO_DATE_TIME)
            )));
            table.addCell(new Cell().add(new Paragraph(transaction.getType().name())));
            table.addCell(new Cell().add(new Paragraph(transaction.getAmount().toString())));
            table.addCell(new Cell().add(new Paragraph(transaction.getDescription())));
            table.addCell(new Cell().add(new Paragraph(transaction.getStatus().name())));
        }

        document.add(table);

        // Add footer with generation timestamp
        Paragraph footer = new Paragraph(
            String.format("Generated on: %s", LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME))
        ).setTextAlignment(TextAlignment.CENTER)
            .setFontSize(8);
        document.add(footer);

        // Close document
        document.close();

        // Log the PDF generation
        auditLogService.logAction(account, AuditLog.AuditAction.GENERATED_PDF,
            account.getAccountNumber(),
            String.format("Transaction history PDF generated for period %s to %s",
                request.getStartDate(), request.getEndDate()));

        return baos.toByteArray();
    }
} 